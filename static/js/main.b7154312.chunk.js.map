{"version":3,"sources":["App.js","index.js"],"names":["App","state","valueImput","calcStr","bufferStr","bufferArr","replace","trim","split","polishString","polishStack","stringId","stackId","i","length","stringIdMax","parseFloat","this","result","calculation","error","setState","value","control","substr","checkStr","className","type","name","placeholder","readOnly","onClick","clean","back","addToInput","equal","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7154312.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n   constructor() {\n      super();\n      this.state = {\n         valueImput: ''\n      }\n      this.calcStr = '';\n   }\n\n   calculation(bufferStr) {\n      // Добавляем пробелы вокруг математических операций и скобок\n      bufferStr = bufferStr = bufferStr.replace(/([^[0-9.]{1})/g, ' $1 ').trim();\n      // Удаляем сдвоенные пробелы\n      bufferStr = bufferStr.replace(/ {1,}/g, ' ');\n      // Добавляем все элементы строки в массив\n      const bufferArr = bufferStr.split(/\\s/);\n   \n      // Формируем обратную польскую запись:\n      // 1+(2+5)*10 => 1,2,5,+,10,*,+\n      let polishString = [];\n      let polishStack = [];\n      let stringId = -1;\n      let stackId = -1;\n   \n      for (let i = 0; i < bufferArr.length; i++) {\n         switch (bufferArr[i]) {\n            case '+':\n               while (stackId >= 0 && (polishStack[stackId] === '+'\n                  || polishStack[stackId] === '-'\n                  || polishStack[stackId] === '*'\n                  || polishStack[stackId] === '/')) {\n                  stringId++;\n                  polishString[stringId] = polishStack[stackId];\n                  stackId--;\n               }\n               stackId++;\n               polishStack[stackId] = bufferArr[i];\n               break;\n            case '-':\n               while (stackId >= 0 && (polishStack[stackId] === '+'\n                  || polishStack[stackId] === '-'\n                  || polishStack[stackId] === '*'\n                  || polishStack[stackId] === '/')) {\n                  stringId++;\n                  polishString[stringId] = polishStack[stackId];\n                  stackId--;\n               }\n               stackId++;\n               polishStack[stackId] = bufferArr[i];\n               break;\n            case '*':\n               while (stackId >= 0 && (polishStack[stackId] === '*' || polishStack[stackId] === '/')) {\n                  stringId++;\n                  polishString[stringId] = polishStack[stackId];\n                  stackId--;\n               }\n               stackId++;\n               polishStack[stackId] = bufferArr[i];\n               break;\n            case '/':\n               while (stackId >= 0 && (polishStack[stackId] === '*' || polishStack[stackId] === '/')) {\n                  stringId++;\n                  polishString[stringId] = polishStack[stackId];\n                  stackId--;\n               }\n               stackId++;\n               polishStack[stackId] = bufferArr[i];\n               break;\n            case '(':\n               stackId++;\n               polishStack[stackId] = bufferArr[i];\n               break;\n            case ')':\n               while (stackId >= 0 && polishStack[stackId] !== '(') {\n                  stringId++;\n                  polishString[stringId] = polishStack[stackId];\n                  stackId--;\n               }\n               stackId--;\n               break;\n            default:\n               stringId++;\n               polishString[stringId] = bufferArr[i];\n         }\n      }\n   \n      while (stackId >= 0) {\n         stringId++;\n         polishString[stringId] = polishStack[stackId];\n         stackId--;\n      }\n   \n      // Производим вычисления по обратной польской записи\n      stackId = -1;\n      let stringIdMax = stringId;\n   \n      for (stringId = 0; stringId <= stringIdMax; stringId++) {\n         switch (polishString[stringId]) {\n            case '+':\n               stackId--;\n               polishStack[stackId] = polishStack[stackId] + polishStack[stackId + 1];\n               break;\n            case '-':\n               stackId--;\n               polishStack[stackId] = polishStack[stackId] - polishStack[stackId + 1];\n               break;\n            case '*':\n               stackId--;\n               polishStack[stackId] = polishStack[stackId] * polishStack[stackId + 1];\n               break;\n            case '/':\n               stackId--;\n               polishStack[stackId] = polishStack[stackId] / polishStack[stackId + 1];\n               break;\n            default:\n               stackId++;\n               polishStack[stackId] = parseFloat(polishString[stringId]);\n         }\n      }\n      return polishStack[stackId];\n   }\n\n   equal() {\n      if (this.calcStr) {\n         let result = '';\n         try {\n            result = this.calculation(this.calcStr);\n         } catch (error) {\n            result = 'Ошибка в выражении';\n         }\n         this.setState({ valueImput: this.calcStr + '=' + result });\n      }\n   }\n\n   addToInput(value) {\n      this.calcStr += value;\n      this.calcStr = this.control(this.calcStr);\n      this.setState({ valueImput: this.calcStr });\n   }\n\n   clean() {\n      this.calcStr = '';\n      this.setState({ valueImput: this.calcStr });\n   }\n\n   back() {\n      this.calcStr = this.calcStr.substr(0, this.calcStr.length - 1);\n      this.setState({ valueImput: this.calcStr });\n   }\n\n   control(checkStr) {\n      checkStr = checkStr.replace(/\\++/g, '+');\n      checkStr = checkStr.replace(/\\\\--/g, '+');\n      checkStr = checkStr.replace(/\\.\\./g, '.');\n      checkStr = checkStr.replace(/[+-][-+]/g, '-');\n      return checkStr;\n   }\n\n   render() {\n      return (\n         <div className=\"calculator\">\n            <div className=\"active_item input\">\n               <input type=\"text\" name=\"textview\" placeholder=\" 0 \" value={this.state.valueImput} readOnly />\n            </div>\n\n            <div className=\"active_item clear\" onClick={() => { this.clean() }}>C</div>\n            <div className=\"active_item back\" onClick={() => { this.back() }}>&larr;</div>\n\n            <div className=\"active_item math\" onClick={() => { this.addToInput('(') }}>(</div>\n            <div className=\"active_item math\" onClick={() => { this.addToInput(')') }}>)</div>\n            <div className=\"passive_item math\"></div>\n            <div className=\"active_item math\" onClick={() => { this.addToInput('/') }}>&divide;</div>\n\n            <div className=\"active_item num\" onClick={() => { this.addToInput('7') }}>7</div>\n            <div className=\"active_item num\" onClick={() => { this.addToInput('8') }}>8</div>\n            <div className=\"active_item num\" onClick={() => { this.addToInput('9') }}>9</div>\n            <div className=\"active_item math\" onClick={() => { this.addToInput('*') }}>&times;</div>\n\n            <div className=\"active_item num\" onClick={() => { this.addToInput('4') }}>4</div>\n            <div className=\"active_item num\" onClick={() => { this.addToInput('5') }}>5</div>\n            <div className=\"active_item num\" onClick={() => { this.addToInput('6') }}>6</div>\n            <div className=\"active_item math\" onClick={() => { this.addToInput('-') }}>-</div>\n\n            <div className=\"active_item num\" onClick={() => { this.addToInput('1') }}>1</div>\n            <div className=\"active_item num\" onClick={() => { this.addToInput('2') }}>2</div>\n            <div className=\"active_item num\" onClick={() => { this.addToInput('3') }}>3</div>\n            <div className=\"active_item math\" onClick={() => { this.addToInput('+') }}>+</div>\n\n            <div className=\"passive_item num\"></div>\n            <div className=\"active_item num\" onClick={() => { this.addToInput('0') }}>0</div>\n            <div className=\"active_item num\" onClick={() => { this.addToInput('.') }}>.</div>\n            <div className=\"active_item equal\" onClick={() => { this.equal() }}>=</div>\n         </div>\n      );\n   }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}